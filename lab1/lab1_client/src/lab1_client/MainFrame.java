/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1_client;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import lab1.*;

/**
 *
 * @author User
 */
public class MainFrame extends javax.swing.JFrame {
    private static final int PORT = 4445;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        fieldMessage = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        buttonAdd = new javax.swing.JButton();
        buttonEnd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonTopMessage = new javax.swing.JButton();
        buttonClientMEssage = new javax.swing.JButton();
        buttonPing = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(70);
        jSplitPane1.setDividerSize(0);

        fieldMessage.setText("message");
        jSplitPane1.setRightComponent(fieldMessage);

        jLabel1.setText("Message ");
        jLabel1.setMaximumSize(new java.awt.Dimension(60, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(50, 14));
        jSplitPane1.setLeftComponent(jLabel1);

        buttonAdd.setText("ADD");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonEnd.setText("END");
        buttonEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEndActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        buttonTopMessage.setText("TOP_MESSAGE");
        buttonTopMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTopMessageActionPerformed(evt);
            }
        });

        buttonClientMEssage.setText("CLIENT_MESSAGE");
        buttonClientMEssage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClientMEssageActionPerformed(evt);
            }
        });

        buttonPing.setText("PING");
        buttonPing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPingActionPerformed(evt);
            }
        });

        jLabel2.setText("Server answer");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonTopMessage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonClientMEssage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonPing)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonEnd))
                            .addComponent(jLabel2))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonEnd)
                    .addComponent(buttonTopMessage)
                    .addComponent(buttonClientMEssage)
                    .addComponent(buttonPing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        
        if (fieldMessage.getText().isEmpty())
            return;
        
        String message =  fieldMessage.getText();
        
        try (DatagramSocket socket = new DatagramSocket()){
            /* send package to server */
            try {
                InetAddress localhost = InetAddress.getByName("localhost");
                byte[] buffer = ByteSerializer.toSerialize(new Message(message, Command.ADD));
                socket.send(new DatagramPacket(buffer, buffer.length, localhost, PORT));
                
            } catch (UnknownHostException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            /* receive package from server */
            try {
                InetAddress localhost = InetAddress.getByName("localhost");
                byte[] buffer = new byte[1024];
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length, localhost, PORT); 
                socket.receive(packet);
                String receivedString = new String(packet.getData(), 0, packet.getLength());
                jTextArea1.append(receivedString + System.lineSeparator());
                
            } catch (UnknownHostException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (SocketException ex){
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_buttonAddActionPerformed
    
    /* send message END for server stop */
    private void buttonEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEndActionPerformed
        /* send package to server */
        try (DatagramSocket socket = new DatagramSocket()){
            try {
                InetAddress localhost = InetAddress.getByName("localhost");
                byte[] buffer = ByteSerializer.toSerialize(new Message("", Command.END));
                socket.send(new DatagramPacket(buffer, buffer.length, localhost, PORT));
            } catch (UnknownHostException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (SocketException ex){
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonEndActionPerformed
    
    /* send PING message for check server is ready */
    private void buttonPingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPingActionPerformed
        /* send package to server */
        try (DatagramSocket socket = new DatagramSocket()){
            try {
                InetAddress localhost = InetAddress.getByName("localhost");
                byte[] buffer = ByteSerializer.toSerialize(new Message("", Command.PING));
                socket.send(new DatagramPacket(buffer, buffer.length, localhost, PORT));
               
            } catch (UnknownHostException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            /* receive package from server */
            try {
                InetAddress localhost = InetAddress.getByName("localhost");
                byte[] buffer = new byte[1024];
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length, localhost, PORT); 
                socket.receive(packet);
                String receivedString = new String(packet.getData(), 0, packet.getLength());
                jTextArea1.append(receivedString + System.lineSeparator());
                
            } catch (UnknownHostException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (SocketException ex){
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonPingActionPerformed

    private void buttonTopMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTopMessageActionPerformed
        toCommunicateWithEmpty(Command.TOP_MESSAGE);
    }//GEN-LAST:event_buttonTopMessageActionPerformed

    private void buttonClientMEssageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClientMEssageActionPerformed
        toCommunicateWithEmpty(Command.CLIENT_MESSAGE);
    }//GEN-LAST:event_buttonClientMEssageActionPerformed
    
    /* send command to server without message and receive answer */
    private void toCommunicateWithEmpty(Command command) {
        toCommunicateWithMessage(command, new String());
    }
    
    
    /* send message to server and receive answer */
    private void toCommunicateWithMessage(Command command, String message) {
        
        /* send package to server */
        try (DatagramSocket socket = new DatagramSocket()){
            try {
                InetAddress localhost = InetAddress.getByName("localhost");
                byte[] buffer = ByteSerializer.toSerialize(new Message(message, command));
                socket.send(new DatagramPacket(buffer, buffer.length, localhost, PORT));
               
            } catch (UnknownHostException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            /* receive package from server */
            try {
                InetAddress localhost = InetAddress.getByName("localhost");
                byte[] buffer = new byte[1024];
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length, localhost, PORT); 
                socket.receive(packet);
                String receivedString = new String(packet.getData(), 0, packet.getLength());
                jTextArea1.append(receivedString + System.lineSeparator());
                
            } catch (UnknownHostException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (SocketException ex){
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonClientMEssage;
    private javax.swing.JButton buttonEnd;
    private javax.swing.JButton buttonPing;
    private javax.swing.JButton buttonTopMessage;
    private javax.swing.JTextField fieldMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}